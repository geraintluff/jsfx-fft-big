desc:FFT test
slider1:8<8,20,1>2^N

@init

// working_space must be 2*sizeB big
function fft_ab(block, sizeA, sizeB, working_space)
    local(i, j, twiddle_amount, twiddle_r, twiddle_i, index1, index2, tmp, N) (
  N = sizeA*sizeB;
  i = 0;
  // Perform the stepwise FFTs
  while (i < sizeA) (
    j = 0;
    // Copy to working area
    while (j < sizeB) (
      working_space[j*2] = block[i*2 + j*sizeA*2];
      working_space[j*2 + 1] = block[i*2 + j*sizeA*2 + 1];
      j += 1;
    );
    fft_permute(working_space, sizeB);
    fft(working_space, sizeB);
    // Copy back, with twiddle factors
    j = 0;
    while (j < sizeB) (
      twiddle_amount = i*j/N;
      twiddle_r = cos(twiddle_amount*2*$pi);
      twiddle_i = sin(twiddle_amount*2*$pi);
    
      block[i*2 + j*sizeA*2] = working_space[j*2]*twiddle_r - working_space[j*2 + 1]*twiddle_i;
      block[i*2 + j*sizeA*2 + 1] = working_space[j*2]*twiddle_i + working_space[j*2 + 1]*twiddle_r;
      j += 1;
    );

    i += 1;
  );
  
  // Perform the in-place FFTs
  j = 0;
  while (j < sizeB) (
    fft_permute(block + j*sizeA*2, sizeA);
    fft(block + j*sizeA*2, sizeA);
    j += 1;
  );
  
  // Permute
  i = 0;
  while (i < sizeA) (
    j = 0;
    while (j < sizeB) (
      index1 = i*sizeB + j;
      index2 = i + j*sizeA;

      tmp = block[index1*2];
      block[index1*2] = block[index2*2];
      block[index2*2] = tmp;
      tmp = block[index1*2 + 1];
      block[index1*2 + 1] = block[index2*2 + 1];
      block[index2*2 + 1] = tmp;
      j += 1;
    );
    i += 1;
  );
);

timings_iterations = 0;

@block

fft_N = 1<<slider1;

fft_block = 0;
fft_block_end = fft_block + fft_N*2;

fft_ab_working_space = fft_block_end;
fft_ab_working_space_end = fft_ab_working_space + fft_N*2; // More than we need, but hey

timings = fft_ab_working_space_end;
sizeA = timings + 100;
sizeB = sizeA + 100;
timings_end = sizeB + 100;

(fft_N != last_fft_N || (mouse_cap&1)) ? (
  timings_iterations = 0;
  timings_counter = 0;
  timings_native = 0;
  while (timings_counter < 100) (
    timings[timings_counter] = 0;
    sizeA[timings_counter] = 0;
    sizeB[timings_counter] = 0;
    timings_counter += 1;
  );
);
last_fft_N = fft_N;

timings_iterations += 1;
timings_counter = 0;

Na = 16;
Nb = fft_N/Na;
while (Nb > 32768) (
  Nb /= 2;
);

while (Na <= 32768 && Nb >= 16) (
  // Random complex input
  i = 0;
  while (i < fft_N) (
    fft_block_1[2*i] = fft_block_2[2*i] = 0;
    fft_block_1[2*i + 1] = fft_block_2[2*i + 1] = 0;
    i += 1;
  );
  fft_block_1[0] = fft_block_2[0] = 1;

  seconds = time_precise();
  fft_ab(fft_block, Na, Nb, fft_ab_working_space);
  timings[timings_counter] += time_precise() - seconds;
  sizeA[timings_counter] = Na;
  sizeB[timings_counter] = Nb;

  Na *= 2;
  Nb /= 2;
  timings_counter += 1;
);

(fft_N <= 32768) ? (
  seconds = time_precise();
  fft_permute(fft_block, fft_N);
  fft(fft_block, fft_N);
  timings_native += time_precise() - seconds;
);

timings_N = timings_counter;

@gfx

lowest = 10000000000;
gi = 0;
while (gi < timings_N) (
  lowest = min(timings[gi], lowest);
  gi += 1;
);

gfx_setfont(1, "Arial", 16);

gfx_r = gfx_g = gfx_b = 1;
gfx_x = gfx_y = gfx_texth;
gfx_printf("FFT size: %i", fft_N);
gfx_x = 200;
gfx_drawstr("(click to reset)");

gi = 0;
while (gi < timings_N) (
  gfx_r = gfx_g = gfx_b = 1;
  gfx_y = (gi*1.2 + 3)*gfx_texth;
  gfx_x = gfx_texth;
  
  timings[gi] == lowest ? (
    gfx_r = gfx_b = 0.5;
  );

  gfx_printf("%i x %i", sizeA[gi], sizeB[gi]);
  gfx_x = 100;
  gfx_printf("%0.3fms", timings[gi]/timings_iterations*1000);
  gfx_x = 200;
  gfx_printf("x%0.3f", timings[gi]/lowest);

  gi += 1;
);

  
fft_N <= 32768 ? (
  gfx_r = 0.5;
  gfx_g = 0.7;
  gfx_b = 1;
  
  gfx_x = gfx_texth;
  gfx_y += 2*gfx_texth;
  gfx_drawstr("native:");
  gfx_x = 100;
  gfx_printf("%0.3fms", timings_native/timings_iterations*1000);
  gfx_x = 200;
  gfx_printf("x%0.3f", timings_native/lowest);
);
